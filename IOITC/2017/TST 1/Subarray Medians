/*
Author - Adhish Kancharla(ak2006)
Problem Name - 2017 TST 1 - Subarray Medians

Tags - Tight TL, Squared Root Decomposition, Frequency Array, Prefix Sums, Lazy Propogation

Idea -
1) 24 points is easy (but a similar idea is used for 100 points) for each subarray count how many elements are less than an endpoint - this should
   be equal to # of elements > that endpoints + 1 or + 0
   This is from the defn of the median given
2)
   For 100 points (credits to Nishchay Manwani (EnEm on CF - https://codeforces.com/profile/EnEm ) for the idea -
   1) Let cnt[n + 1] be an array initialized with -1's - cnt[i] = -1 means the index i is not yet encountered and cnt[i] = +1 means i is processed
   2) Iterate from i = 1 to n and update cnt[ind[i]] = +1
   3) At the same time (in the current iteration) query for # of subarrays going towards left from ind[i] with sum = + 1 or sum = + 2
   and similarly # of subarrays going towards right from ind[i] with sum = + 1 or sum = + 2
   Make sure you see why these subarrays would have (# of elements) < i == (# of elements > i) + 1 or (# of elements > i) + 0
   and hence these would be the only subarrays to count

   4) Use square root decomposition with prefix sums , frequency map and lazy propogation to get TLE (24 points only)
   5) Change the frequency map to a frequency array to get AC


*/
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vb = vector<bool>;
using vvb = vector<vb>;
using vi = vector<int>;
using vvi = vector<vi>;
using vl = vector<ll>;
using vvl = vector<vl>;
using vc = vector<char>;
using vvc = vector<vc>;
const ll mod = 1e9 + 7,inf = 1e18;
#define pb push_back
#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

int n = 1e5 + 5;
int rn = sqrt(n);
vi p(n),ind(n),delta(n);
vvi mp((n + rn)/rn,vi(4 * n));

void init()
{

    p[0] = 0;
    mp[0][2 * n] = 1;

    for (int i = 1;i<=n;i++){
        p[i] = p[i - 1] - 1;
        mp[i/rn][p[i] + 2 * n]++;
    }
}

void update(int pos)
{
    for(int i = pos + 1; i < min((pos / rn + 1) * rn , n + 1); i++)
    {
        mp[pos / rn][p[i] + 2 * n]--;
        p[i] += 2;
        mp[pos / rn][p[i] + 2 * n]++;
    }
    for(int i = pos / rn + 1; i < (n + rn) / rn; i++)
    {
        delta[i] += 2;
    }
}

ll Pquery(int pos)
{
    ll ret = 0;
    for(int i = pos + 2; i < min(((pos + 1)/rn + 1) * rn , n + 1); i++)
    {
        if(p[i] == p[pos + 1]) ret++;
        if(p[i] == p[pos + 1] + 1) ret++;
    }
    for(int i = (pos + 1)/rn + 1; i< ( n + rn)/rn; i++)
    {
        ret += mp[i][p[pos + 1] + delta[(pos + 1)/rn] - delta[i] + 2 * n];
        ret += mp[i][p[pos + 1] + delta[(pos + 1)/rn] - delta[i] + 1 + 2 * n];
    }
    return ret;
}

ll Squery(int pos)
{
    ll ret = 0;
    for(int i = pos - 1; i >= (pos / rn) * rn; i--)
    {
        if(p[i] == p[pos]) ret++;
        if(p[i] == p[pos] - 1) ret++;
    }
    for(int i = pos / rn - 1; i >= 0; i--)
    {
        ret += mp[i][p[pos] + delta[pos / rn] - delta[i] + 2 * n];
        ret += mp[i][p[pos] + delta[pos / rn] - delta[i] - 1 + 2 * n];
    }
    return ret;
}
int main()
{
    cin>>n;
    rn = sqrt(n);

    for (int i = 1;i<=n;i++){
        int x;
        cin>>x;
        ind[x] = i - 1;
    }

    init();

    ll ans = 0;
    for (int i = 1;i<=n;i++){
        update(ind[i]);
        ans += Pquery(ind[i]) + Squery(ind[i]);
    }
    cout<<ans + n;
    return 0;
}
